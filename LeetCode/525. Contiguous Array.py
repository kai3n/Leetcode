# #time limit
# class Solution(object):
#     def findMaxLength(self, nums):
#         """
#         :type nums: List[int]
#         :rtype: int
#         """
#         l = [[(0,0) for _ in range(len(nums))] for _ in range(len(nums))]
#         for i in range(len(nums)):
#             zeroCnt = 0
#             oneCnt = 0
#             for j in range(i, len(nums)):
#                 if nums[j] == 0:
#                     zeroCnt += 1
#                 else:
#                     oneCnt += 1
#                 l[i][j] = (zeroCnt,oneCnt)
#         max = 0
#         for i in range(len(nums)):
#             for j in range(i, len(nums)):
#                 if l[i][j][0] == l[i][j][1]:
#                     if max < l[i][j][0]:
#                         max = l[i][j][0]
#         return max*2
#
#
# test = Solution()
# print(test.findMaxLength([0,1,0,1,1]))
# print(test.findMaxLength([1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,1]))

class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        f = dict()
        f[0] = -1
        sum = 0
        ans = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                sum -= 1
            else:
                sum += 1

            if f.get(sum,-50000) != -50000:
                ans = max(ans, i-f[sum])
            else:
                f[sum] = i
        return ans

test = Solution()
print(test.findMaxLength([0,0,1]))
print(test.findMaxLength([0,0,1,0,0,0,1,1]))
print(test.findMaxLength([1,1,1,1,1,1,1,1]))
print(test.findMaxLength([0,1,1,0,0,0,0,0,0,1,0]))

'''
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        map<int, int> f;
        f[0] = -1;
        int sum = 0, ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                sum--;
            } else {
                sum++;
            }
            if (f.count(sum)) {
                ans = max(ans, i - f[sum]);
            } else {
                f[sum] = i;
            }
        }
        return ans;
    }
};
'''